#line 1 "SqlLexer_gen.cpp"

#line 3 "SqlLexer_gen.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define quickstep_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer quickstep_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define quickstep_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer quickstep_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define quickstep_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer quickstep_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define quickstep_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string quickstep_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define quickstep_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes quickstep_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define quickstep_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer quickstep_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define quickstep_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer quickstep_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define quickstep_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state quickstep_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define quickstep_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer quickstep_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define quickstep_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state quickstep_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define quickstep_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state quickstep_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define quickstep_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack quickstep_yyensure_buffer_stack
#endif

#ifdef yylex
#define quickstep_yylex_ALREADY_DEFINED
#else
#define yylex quickstep_yylex
#endif

#ifdef yyrestart
#define quickstep_yyrestart_ALREADY_DEFINED
#else
#define yyrestart quickstep_yyrestart
#endif

#ifdef yylex_init
#define quickstep_yylex_init_ALREADY_DEFINED
#else
#define yylex_init quickstep_yylex_init
#endif

#ifdef yylex_init_extra
#define quickstep_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra quickstep_yylex_init_extra
#endif

#ifdef yylex_destroy
#define quickstep_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy quickstep_yylex_destroy
#endif

#ifdef yyget_debug
#define quickstep_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug quickstep_yyget_debug
#endif

#ifdef yyset_debug
#define quickstep_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug quickstep_yyset_debug
#endif

#ifdef yyget_extra
#define quickstep_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra quickstep_yyget_extra
#endif

#ifdef yyset_extra
#define quickstep_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra quickstep_yyset_extra
#endif

#ifdef yyget_in
#define quickstep_yyget_in_ALREADY_DEFINED
#else
#define yyget_in quickstep_yyget_in
#endif

#ifdef yyset_in
#define quickstep_yyset_in_ALREADY_DEFINED
#else
#define yyset_in quickstep_yyset_in
#endif

#ifdef yyget_out
#define quickstep_yyget_out_ALREADY_DEFINED
#else
#define yyget_out quickstep_yyget_out
#endif

#ifdef yyset_out
#define quickstep_yyset_out_ALREADY_DEFINED
#else
#define yyset_out quickstep_yyset_out
#endif

#ifdef yyget_leng
#define quickstep_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng quickstep_yyget_leng
#endif

#ifdef yyget_text
#define quickstep_yyget_text_ALREADY_DEFINED
#else
#define yyget_text quickstep_yyget_text
#endif

#ifdef yyget_lineno
#define quickstep_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno quickstep_yyget_lineno
#endif

#ifdef yyset_lineno
#define quickstep_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno quickstep_yyset_lineno
#endif

#ifdef yyget_column
#define quickstep_yyget_column_ALREADY_DEFINED
#else
#define yyget_column quickstep_yyget_column
#endif

#ifdef yyset_column
#define quickstep_yyset_column_ALREADY_DEFINED
#else
#define yyset_column quickstep_yyset_column
#endif

#ifdef yywrap
#define quickstep_yywrap_ALREADY_DEFINED
#else
#define yywrap quickstep_yywrap
#endif

#ifdef yyget_lval
#define quickstep_yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval quickstep_yyget_lval
#endif

#ifdef yyset_lval
#define quickstep_yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval quickstep_yyset_lval
#endif

#ifdef yyget_lloc
#define quickstep_yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc quickstep_yyget_lloc
#endif

#ifdef yyset_lloc
#define quickstep_yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc quickstep_yyset_lloc
#endif

#ifdef yyalloc
#define quickstep_yyalloc_ALREADY_DEFINED
#else
#define yyalloc quickstep_yyalloc
#endif

#ifdef yyrealloc
#define quickstep_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc quickstep_yyrealloc
#endif

#ifdef yyfree
#define quickstep_yyfree_ALREADY_DEFINED
#else
#define yyfree quickstep_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define quickstep_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[534] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  152,    2,    2,  150,  150,  149,  148,  150,
      127,  123,  126,  123,  123,  146,  150,  116,  113,  117,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  124,  121,  122,    4,    5,
        5,    3,  142,  142,  139,  143,  143,  137,  144,  144,
      141,    1,  149,  114,  147,  146,  146,  146,    0,  120,
      118,  115,  119,  145,  145,  145,  145,   10,  145,  145,
      145,   21,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  125,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,   50,   57,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,   70,   71,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,   99,  145,  145,  145,  145,  145,
      145,  145,  145,  145,    4,    5,    3,  142,  138,  143,
      136,  136,  128,  130,  131,  132,  133,  134,  135,  136,
      144,  140,  147,  146,    0,  146,    6,    7,  145,    9,
       11,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,   28,  145,  145,  145,  145,  145,  145,   36,

      145,  145,  145,  145,  145,   42,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,   59,  145,  145,
      145,  145,  145,  145,   66,  145,   69,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
       87,  145,  145,   92,   93,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      128,  130,  129,  145,  145,  145,  145,  145,  145,   18,
       19,  145,  145,  145,   25,  145,  145,  145,  145,  145,
       31,  145,   34,   35,  145,  145,  145,  145,  145,  145,
       44,   45,  145,   47,  145,   49,  145,  145,  145,  145,

       56,   58,   60,   61,   62,  145,  145,  145,   67,  145,
      145,   74,  145,  145,  145,  145,  145,   81,  145,   83,
      145,  145,  145,   89,  145,  145,  145,  145,  145,  145,
      145,   98,  100,  145,  145,  145,  145,  145,  145,  145,
      108,  145,  145,  111,  112,  128,  129,    8,  145,  145,
      145,  145,  145,   22,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,   39,   40,  145,  145,   46,
      145,   51,   52,  145,  145,   63,  145,   65,   68,   72,
       73,  145,  145,  145,  145,  145,   82,  145,  145,   86,
      145,  145,  145,  145,  145,  145,   97,  145,  145,  103,

      145,  145,  106,  145,  109,  145,  145,  145,  145,  145,
      145,  145,   23,  145,   26,  145,  145,  145,   30,  145,
      145,   37,  145,  145,  145,   48,   53,  145,  145,   64,
      145,  145,  145,  145,  145,  145,   85,  145,   90,   91,
       94,   95,  145,  145,  145,  104,  105,  107,  110,  145,
       13,  145,  145,  145,  145,  145,   20,   27,   29,  145,
      145,   38,  145,   43,  145,  145,  145,   77,  145,   79,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,   33,  145,  145,   55,  145,  145,   80,
      145,  145,  145,  145,  145,   12,  145,  145,  145,  145,

      145,  145,   41,   54,   75,   78,  145,  145,   96,  145,
      102,   14,  145,  145,  145,   24,   32,   76,   84,  145,
      145,  145,   16,   17,  145,  101,  145,  145,  145,   88,
      145,   15,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    1,    8,    7,
        7,    7,    9,    7,   10,   11,    7,   12,   12,   12,
       12,   12,   12,   12,   12,   13,   13,   14,    7,   15,
       16,   17,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   44,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   43,   72,    1,   73,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    1,    5,
        5,    6,    6,    5,    1,    1,    1,    7,    7,    7,
        7,    7,    7,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    1,    9,   10,    7,    7,    7,    7,
        7,    7,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    1,    1
    } ;

static const flex_int16_t yy_base[549] =
    {   0,
        0,    1,   46,    0,  119,  192,    2,    3,  129,  130,
        6,   10,  231, 1182, 1182,    0, 1182,   13, 1182,  151,
     1182, 1182, 1182,  152,    6,  118,  132,    4, 1182,   28,
      118,  131,  248,  188,  197,  186,  106,  124,  112,  118,
      129,  193,  126,  123,  237,  195,  121,  256,  255,  298,
      189,  185,  236,    0,  194, 1182, 1182, 1182,   27,    4,
       19,    0,    0,    0,   17,    0,    0,  362,    0,    0,
        8,    0,   22, 1182,    0,  257,  306,  313,   18, 1182,
     1182, 1182, 1182,    0,  206,  302,  208,  214,  234,  244,
      266,    0,  284,  307,  309,  310,  315,  306,  301,  350,

      311,  316, 1182,  315,  332,  352,  325,  320,  359,  355,
      361,  359,  356,  358,  406,    0,  374,  359,  368,  382,
      381,  375,  381,  394,  407,  416,    0,  423,  408,  424,
      412,  413,  427,  424,  420,  434,  430,  415,  465,  441,
      440,  443,  444,  442,    0,  429,  436,  478,  449,  463,
      466,  478,  470,  485,    0,   29,    0,    0, 1182,    0,
     1182, 1182,   22,   24, 1182, 1182, 1182, 1182, 1182,    0,
        0, 1182,    0,  493,   26,   28,    0,    0,  486,    0,
      487,  470,  471,  493,  490,  496,  479,  483,  478,  503,
      485,  493,    0,  516,  513,  523,  510,  519,  531,    0,

      519,  523,  523,  524,  532,  540,  535,  537,  529,  543,
      543,  535,  549,  551,  552,  553,  546,    0,  541,  542,
      558,  557,  548,  555,    0,  564,    0,  579,  583,  575,
      574,  593,  596,  587,  581,  596,  594,  602,  603,  601,
      591,  596,  607,    0,    0,  609,  596,  604,  604,  614,
      609,  611,  634,  626,  619,  613,  628,  648,  646,  639,
       30,  132,    0,  640,  645,  655,  656,  653,  652,    0,
        0,  655,  654,  648,    0,  649,  652,  667,  652,  654,
      671,  668,    0,    0,  659,  681,  679,  665,  676,  683,
        0,    0,  684,    0,  690,    0,  683,  691,  692,  694,

        0,    0,    0,    0,    0,  695,  696,  709,  699,  701,
      704,    0,  714,  719,  720,  725,  709,    0,  723,    0,
      712,  707,  712,    0,  730,  721,  734,  722,  721,  723,
      744,    0,    0,  745,  737,  748,  744,  747,  761,  765,
        0,  768,  759,    0,    0,  153, 1182,    0,  771,  771,
      776,  764,  775,    0,  768,  766,  780,  781,  774,  777,
      785,  778,  779,  776,  795,    0,    0,  777,  794,    0,
      800,    0,    0,  788,  801,    0,  811,    0,    0,    0,
        0,  805,  812,  824,  813,  823,    0,  828,  818,    0,
      830,  834,  819,  822,  821,  824,    0,  824,  830,    0,

      841,  842,    0,  829,    0,  827,  842,  839,  834,  840,
      858,  856,    0,  865,    0,  869,  858,  861,    0,  879,
      881,    0,  866,  880,  876,    0,    0,  886,  891,    0,
      884,  876,  888,  873,  879,  886,    0,  889,    0,    0,
        0,    0,  893,  903,  901,    0,    0,    0,    0,  892,
        0,  899,  894,  898,  902,  907,    0,    0,    0,  908,
      903,    0,  910,    0,  929,  924,  924,    0,  927,    0,
      917,  941,  938,  934,  936,  945,  944,  940,  939,  940,
      937,  944,  945,    0,  953,  942,    0,  949,  957,    0,
      961,  954,  962,  956,  970,    0,  968,  976,  970,  985,

      974,  990,    0,    0,  980,    0,  981,  993,    0,  993,
        0,    0,  988, 1002,  990,    0,    0,    0,    0,  989,
     1007,  993,    0,    0, 1009,    0, 1006,  998, 1012,    0,
      999,    0, 1182, 1064, 1074, 1084, 1094, 1104, 1108, 1111,
     1117, 1127, 1137, 1147, 1157, 1167, 1172, 1174
    } ;

static const flex_int16_t yy_def[549] =
    {   0,
      534,  534,  533,    3,  535,  535,  536,  536,  537,  537,
      538,  538,  533,  533,  533,  539,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  533,  533,  533,  533,  533,
      533,  541,  542,  542,  533,  543,  543,  544,  545,  545,
      533,  539,  533,  533,  546,  533,  533,  533,  533,  533,
      533,  533,  533,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  533,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  533,  533,  541,  542,  533,  543,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  547,
      545,  533,  546,  533,  533,  533,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      533,  533,  548,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  533,  533,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,    0,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533
    } ;

static const flex_int16_t yy_nxt[1256] =
    {   0,
      533,  155,   15,   15,   64,   64,  156,  156,   70,   65,
       65,   71,   70,  172,   73,   71,   73,   76,   76,   81,
       82,  156,  156,   73,  159,   73,  175,  175,  155,  176,
      176,  156,  156,  261,  262,  262,  262,  176,  176,  176,
      176,  346,  262,   83,   16,   16,   17,   18,   19,   18,
       20,   21,   22,   23,   22,   24,   25,   26,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   54,   56,
       17,   17,   31,   32,   33,   34,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   57,   58,   17,
       59,   60,   61,   17,   17,   17,   17,   17,   77,   78,
       78,   67,   67,   17,   17,   17,   65,   65,   85,   79,
      112,  113,  115,  262,  262,   80,   86,  116,   87,  117,
      118,  122,   89,   88,  124,  114,   90,  123,  134,   91,
      125,   75,   17,   17,  262,  262,   74,   85,   79,  112,
      113,  115,   92,   68,   68,   86,  116,   87,  117,  118,
      122,   89,   88,  124,  114,   90,  123,  134,   91,  125,
       17,   17,   17,   59,   60,   61,   17,   17,   17,   17,

       17,   92,  151,  107,  103,   99,   17,   17,   17,  100,
      119,  108,  131,  101,  120,  154,  132,  109,  121,  148,
      110,  149,  102,  111,  150,  104,  177,  105,  180,  133,
      533,  151,  107,  181,   99,   17,   17,  106,  100,  119,
      108,  131,  101,  120,  154,  132,  109,  121,  148,  110,
      149,  102,  111,  150,  104,  177,  105,  180,  133,  126,
      152,  153,  181,   17,   17,   93,  106,  127,   76,   76,
      182,  128,   94,  135,  129,  130,  139,  136,   79,   95,
      183,  137,   96,   97,  140,   98,  533,  138,  126,  152,
      153,  141,  142,  533,   93,  533,  127,  184,  533,  182,

      128,   94,  135,  129,  130,  139,  136,   79,   95,  183,
      137,   96,   97,  140,   98,  143,  138,  174,  174,  185,
      141,  142,  144,   77,   78,   78,  184,   79,  186,  145,
      178,  190,  146,  191,   79,  147,  533,  187,  179,  188,
      192,  189,  193,  533,  143,  533,  197,  198,  185,  533,
      199,  144,  200,  203,  204,  533,   79,  186,  145,  178,
      190,  146,  191,   79,  147,  162,  187,  179,  188,  192,
      189,  193,  194,  163,  164,  197,  198,  201,  195,  199,
      165,  200,  203,  204,  166,  196,  207,  205,  202,  208,
      209,  210,  167,  206,  211,  212,  168,  533,  169,  217,

      218,  194,  170,  219,  220,  223,  201,  195,  221,  165,
      222,  224,  533,  166,  196,  207,  205,  202,  208,  209,
      210,  167,  206,  211,  212,  168,  213,  169,  217,  218,
      225,  170,  219,  220,  223,  226,  214,  221,  227,  222,
      224,  215,  216,  228,  229,  230,  231,  232,  233,  235,
      236,  237,  234,  240,  241,  213,  238,  239,  245,  225,
      246,  247,  248,  249,  226,  214,  250,  227,  251,  254,
      215,  216,  228,  229,  230,  231,  232,  233,  235,  236,
      237,  234,  240,  241,  242,  238,  239,  245,  255,  246,
      247,  248,  249,  243,  256,  250,  252,  251,  254,  257,

      258,  244,  260,  253,  174,  174,  259,  264,  265,  266,
      267,  270,  268,  242,   79,  272,  273,  255,  274,  275,
      276,  277,  243,  256,  269,  252,  271,  278,  257,  258,
      244,  260,  253,  279,  280,  259,  264,  265,  266,  267,
      270,  268,  281,   79,  272,  273,  282,  274,  275,  276,
      277,  283,  284,  269,  285,  271,  278,  286,  287,  288,
      289,  290,  279,  280,  291,  292,  293,  294,  295,  296,
      297,  281,  298,  299,  300,  282,  302,  303,  304,  305,
      283,  284,  306,  285,  301,  307,  286,  287,  288,  289,
      290,  308,  309,  291,  292,  293,  294,  295,  296,  297,

      310,  298,  299,  300,  311,  302,  303,  304,  305,  312,
      313,  306,  314,  301,  307,  315,  316,  318,  317,  319,
      308,  309,  320,  321,  322,  323,  324,  326,  327,  310,
      328,  330,  331,  311,  332,  333,  325,  334,  312,  313,
      329,  314,  335,  338,  315,  316,  318,  317,  319,  339,
      340,  320,  321,  322,  323,  324,  326,  327,  341,  328,
      330,  331,  342,  332,  333,  336,  334,  337,  343,  329,
      344,  335,  338,  345,  348,  349,  350,  351,  339,  340,
      352,  353,  354,  355,  356,  357,  358,  341,  359,  360,
      361,  342,  362,  363,  336,  364,  337,  343,  365,  344,

      366,  367,  345,  348,  349,  350,  351,  368,  369,  352,
      353,  354,  355,  356,  357,  358,  370,  359,  360,  361,
      371,  362,  363,  372,  364,  373,  374,  365,  375,  366,
      367,  376,  377,  378,  379,  380,  368,  369,  381,  382,
      383,  384,  385,  386,  387,  370,  388,  389,  390,  371,
      391,  392,  372,  393,  373,  374,  394,  375,  395,  396,
      376,  377,  378,  379,  380,  397,  398,  381,  382,  383,
      384,  385,  386,  387,  399,  388,  389,  390,  400,  391,
      392,  401,  393,  402,  403,  394,  404,  395,  396,  405,
      406,  407,  408,  409,  397,  398,  410,  412,  413,  411,

      414,  415,  416,  399,  417,  418,  419,  400,  420,  421,
      401,  422,  402,  403,  423,  404,  424,  425,  405,  406,
      407,  408,  409,  426,  427,  410,  412,  413,  411,  414,
      415,  416,  430,  417,  418,  419,  428,  420,  421,  429,
      422,  431,  432,  423,  433,  424,  425,  434,  435,  436,
      437,  438,  426,  427,  439,  440,  441,  442,  443,  444,
      445,  430,  446,  447,  448,  428,  449,  450,  429,  451,
      431,  432,  452,  433,  453,  454,  434,  435,  436,  437,
      438,  455,  456,  439,  440,  441,  442,  443,  444,  445,
      457,  446,  447,  448,  458,  449,  450,  459,  451,  460,

      461,  452,  462,  453,  454,  463,  464,  465,  466,  467,
      455,  456,  468,  469,  470,  471,  472,  473,  474,  457,
      475,  476,  477,  458,  478,  479,  459,  480,  460,  461,
      481,  462,  482,  483,  463,  464,  465,  466,  467,  484,
      485,  468,  469,  470,  471,  472,  473,  474,  486,  475,
      476,  477,  487,  478,  479,  488,  480,  489,  490,  481,
      491,  482,  483,  492,  493,  494,  495,  496,  484,  485,
      497,  498,  499,  500,  501,  502,  503,  486,  504,  505,
      506,  487,  507,  508,  488,  509,  489,  490,  510,  491,
      511,  512,  492,  493,  494,  495,  496,  513,  514,  497,

      498,  499,  500,  501,  502,  503,  515,  504,  505,  506,
      516,  507,  508,  517,  509,  518,  519,  510,  520,  511,
      512,  521,  522,  523,  524,  525,  513,  514,  526,  527,
      528,  529,  530,  531,  532,  515,  533,  533,  533,  516,
      533,  533,  517,  533,  518,  519,  533,  520,  533,  533,
      521,  522,  523,  524,  525,  533,  533,  526,  527,  528,
      529,  530,  531,  532,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   72,   72,   84,   84,   84,  533,
       84,  157,  157,  157,  157,  533,  157,  158,  158,  158,
      533,  158,  158,  158,  158,  158,  158,  160,  160,  160,
      533,  160,  160,  160,  160,  533,  160,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  171,  171,  533,
      171,  171,  171,  171,  171,  171,  171,  173,  533,  173,
      173,  173,  173,  173,  173,  173,  173,  263,  263,  347,
      347,   13,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533
    } ;

static const flex_int16_t yy_chk[1256] =
    {   0,
        0,  155,    1,    2,    7,    8,   60,   60,   11,    7,
        8,   11,   12,   71,   18,   12,   18,   25,   25,   28,
       28,   61,   61,   73,   65,   73,   79,   79,   59,   79,
       79,  156,  156,  163,  163,  164,  164,  175,  175,  176,
      176,  261,  261,   30,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   26,   26,
       26,    9,   10,    5,    5,    5,    9,   10,   31,   26,
       37,   38,   39,  262,  262,   27,   31,   39,   31,   40,
       41,   43,   32,   31,   44,   38,   32,   43,   47,   32,
       44,   24,    5,    5,  346,  346,   20,   31,   26,   37,
       38,   39,   32,    9,   10,   31,   39,   31,   40,   41,
       43,   32,   31,   44,   38,   32,   43,   47,   32,   44,
        5,    5,    6,    6,    6,    6,    6,    6,    6,    6,

        6,   32,   52,   36,   35,   34,    6,    6,    6,   34,
       42,   36,   46,   34,   42,   55,   46,   36,   42,   51,
       36,   51,   34,   36,   51,   35,   85,   35,   87,   46,
       13,   52,   36,   88,   34,    6,    6,   35,   34,   42,
       36,   46,   34,   42,   55,   46,   36,   42,   51,   36,
       51,   34,   36,   51,   35,   85,   35,   87,   46,   45,
       53,   53,   88,    6,    6,   33,   35,   45,   76,   76,
       89,   45,   33,   48,   45,   45,   49,   48,   76,   33,
       90,   48,   33,   33,   49,   33,    0,   48,   45,   53,
       53,   49,   49,    0,   33,    0,   45,   91,    0,   89,

       45,   33,   48,   45,   45,   49,   48,   76,   33,   90,
       48,   33,   33,   49,   33,   50,   48,   77,   77,   93,
       49,   49,   50,   78,   78,   78,   91,   77,   94,   50,
       86,   96,   50,   97,   78,   50,    0,   95,   86,   95,
       98,   95,   99,    0,   50,    0,  101,  102,   93,    0,
      104,   50,  105,  107,  108,    0,   77,   94,   50,   86,
       96,   50,   97,   78,   50,   68,   95,   86,   95,   98,
       95,   99,  100,   68,   68,  101,  102,  106,  100,  104,
       68,  105,  107,  108,   68,  100,  110,  109,  106,  111,
      112,  113,   68,  109,  113,  114,   68,    0,   68,  117,

      118,  100,   68,  119,  120,  122,  106,  100,  121,   68,
      121,  123,    0,   68,  100,  110,  109,  106,  111,  112,
      113,   68,  109,  113,  114,   68,  115,   68,  117,  118,
      124,   68,  119,  120,  122,  125,  115,  121,  126,  121,
      123,  115,  115,  128,  129,  130,  131,  132,  133,  134,
      135,  136,  133,  137,  138,  115,  136,  136,  140,  124,
      141,  142,  143,  144,  125,  115,  146,  126,  147,  149,
      115,  115,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  133,  137,  138,  139,  136,  136,  140,  150,  141,
      142,  143,  144,  139,  151,  146,  148,  147,  149,  152,

      153,  139,  154,  148,  174,  174,  153,  179,  181,  182,
      183,  185,  184,  139,  174,  186,  187,  150,  188,  189,
      190,  191,  139,  151,  184,  148,  185,  192,  152,  153,
      139,  154,  148,  194,  195,  153,  179,  181,  182,  183,
      185,  184,  196,  174,  186,  187,  197,  188,  189,  190,
      191,  198,  199,  184,  201,  185,  192,  202,  203,  204,
      205,  206,  194,  195,  207,  208,  209,  210,  211,  212,
      213,  196,  214,  215,  216,  197,  217,  219,  220,  221,
      198,  199,  222,  201,  216,  223,  202,  203,  204,  205,
      206,  224,  226,  207,  208,  209,  210,  211,  212,  213,

      228,  214,  215,  216,  229,  217,  219,  220,  221,  230,
      231,  222,  232,  216,  223,  233,  234,  235,  234,  236,
      224,  226,  237,  238,  239,  240,  241,  242,  243,  228,
      246,  247,  248,  229,  249,  250,  241,  251,  230,  231,
      246,  232,  252,  254,  233,  234,  235,  234,  236,  255,
      256,  237,  238,  239,  240,  241,  242,  243,  257,  246,
      247,  248,  257,  249,  250,  253,  251,  253,  258,  246,
      259,  252,  254,  260,  264,  265,  266,  267,  255,  256,
      268,  269,  272,  273,  274,  276,  277,  257,  278,  279,
      280,  257,  281,  282,  253,  285,  253,  258,  286,  259,

      287,  288,  260,  264,  265,  266,  267,  289,  290,  268,
      269,  272,  273,  274,  276,  277,  293,  278,  279,  280,
      295,  281,  282,  297,  285,  298,  299,  286,  300,  287,
      288,  306,  307,  308,  309,  310,  289,  290,  311,  313,
      314,  315,  316,  317,  319,  293,  321,  322,  323,  295,
      325,  326,  297,  327,  298,  299,  328,  300,  329,  330,
      306,  307,  308,  309,  310,  331,  334,  311,  313,  314,
      315,  316,  317,  319,  335,  321,  322,  323,  336,  325,
      326,  337,  327,  338,  339,  328,  340,  329,  330,  342,
      343,  349,  350,  351,  331,  334,  352,  353,  355,  352,

      356,  357,  358,  335,  359,  360,  361,  336,  362,  363,
      337,  364,  338,  339,  365,  340,  368,  369,  342,  343,
      349,  350,  351,  371,  374,  352,  353,  355,  352,  356,
      357,  358,  377,  359,  360,  361,  375,  362,  363,  375,
      364,  382,  383,  365,  384,  368,  369,  385,  386,  388,
      389,  391,  371,  374,  392,  393,  394,  395,  396,  398,
      399,  377,  401,  402,  404,  375,  406,  407,  375,  408,
      382,  383,  409,  384,  410,  411,  385,  386,  388,  389,
      391,  412,  414,  392,  393,  394,  395,  396,  398,  399,
      416,  401,  402,  404,  417,  406,  407,  418,  408,  420,

      421,  409,  423,  410,  411,  424,  425,  428,  429,  431,
      412,  414,  432,  433,  434,  435,  436,  438,  443,  416,
      444,  445,  450,  417,  452,  453,  418,  454,  420,  421,
      455,  423,  456,  460,  424,  425,  428,  429,  431,  461,
      463,  432,  433,  434,  435,  436,  438,  443,  465,  444,
      445,  450,  466,  452,  453,  467,  454,  469,  471,  455,
      472,  456,  460,  473,  474,  475,  476,  477,  461,  463,
      478,  479,  480,  481,  482,  483,  485,  465,  486,  488,
      489,  466,  491,  492,  467,  493,  469,  471,  494,  472,
      495,  497,  473,  474,  475,  476,  477,  498,  499,  478,

      479,  480,  481,  482,  483,  485,  500,  486,  488,  489,
      501,  491,  492,  502,  493,  505,  507,  494,  508,  495,
      497,  510,  513,  514,  515,  520,  498,  499,  521,  522,
      525,  527,  528,  529,  531,  500,    0,    0,    0,  501,
        0,    0,  502,    0,  505,  507,    0,  508,    0,    0,
      510,  513,  514,  515,  520,    0,    0,  521,  522,  525,
      527,  528,  529,  531,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  539,  539,  540,  540,  540,    0,
      540,  541,  541,  541,  541,    0,  541,  542,  542,  542,
        0,  542,  542,  542,  542,  542,  542,  543,  543,  543,
        0,  543,  543,  543,  543,    0,  543,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  545,  545,    0,
      545,  545,  545,  545,  545,  545,  545,  546,    0,  546,
      546,  546,  546,  546,  546,  546,  546,  547,  547,  548,
      548,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[152] =
    {   0,
0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../SqlLexer.lpp"
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 **/
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1
#line 29 "../SqlLexer.lpp"
#include <cstdio>
#include <string>
#include <vector>

#include "parser/ParseJoinedTableReference.hpp"
#include "parser/ParseLiteralValue.hpp"
#include "utility/PtrList.hpp"
#include "utility/PtrVector.hpp"

namespace quickstep {

class BinaryOperation;
class Comparison;
class ParseArray;
class ParseAssignment;
class ParseAttribute;
class ParseAttributeDefinition;
class ParseBlockProperties;
class ParseColumnConstraint;
class ParseCommand;
class ParseDataType;
class ParseExpression;
struct ParseFrameInfo;
class ParseFunctionCall;
class ParseGroupBy;
class ParseHaving;
class ParseKeyBoolValue;
class ParseKeyIntegerValue;
class ParseKeyStringValue;
class ParseKeyStringList;
class ParseKeyValue;
class ParseLimit;
class ParseOrderBy;
class ParseOrderByItem;
class ParsePartitionClause;
class ParsePredicate;
class ParsePriority;
class ParseSample;
class ParseScalarLiteral;
class ParseSearchedWhenClause;
class ParseSelect;
class ParseSelectionClause;
class ParseSelectionItem;
class ParseSelectionItemScalar;
class ParseSelectionList;
class ParseSetOperation;
class ParseSimpleTableReference;
class ParseSimpleWhenClause;
class ParseStringKeyLiteralValues;
class ParseStatement;
class ParseStatementCopy;
class ParseStatementCreateTable;
class ParseStatementDelete;
class ParseStatementDropTable;
class ParseStatementInsert;
class ParseStatementInsertTuple;
class ParseStatementInsertSelection;
class ParseStatementSetOperation;
class ParseStatementQuit;
class ParseStatementUpdate;
class ParseSubqueryExpression;
class ParseSubqueryTableReference;
class ParseTableReference;
class ParseTableReferenceSignature;
class ParseTypeCast;
class ParseWindow;
class Type;
class UnaryOperation;

}  // namespace quickstep

#include "parser/ParseString.hpp"
#include "parser/SqlParser_gen.hpp"
#include "parser/ParserUtil.hpp"

#define YY_USER_ACTION                                    \
  {                                                       \
    yylloc->first_line = yylineno;                        \
    yylloc->first_column = yycolumn;                      \
    yycolumn += yyleng;                                   \
  }

#line 1246 "SqlLexer_gen.cpp"
/* FIXME(chasseur, qzeng): Add support for hexadecimal literals. */
/**
 * These patterns are based on the SQL-2011 standard for syntax of numeric
 * literals (Part 2, Section 5.3 of the standard).
 **/

#line 1253 "SqlLexer_gen.cpp"

#define INITIAL 0
#define CONDITION_SQL 1
#define CONDITION_COMMAND 2
#define CONDITION_STRING_SINGLE_QUOTED 3
#define CONDITION_STRING_SINGLE_QUOTED_ESCAPED 4
#define CONDITION_STRING_DOUBLE_QUOTED 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 134 "../SqlLexer.lpp"


#line 1543 "SqlLexer_gen.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 534 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 533 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 137 "../SqlLexer.lpp"
{
    /* A forward slash character represents a system command. */
    BEGIN(CONDITION_COMMAND);
    yylval->string_value_ = new quickstep::ParseString(
        yylloc->first_line, yylloc->first_column, std::string(yytext, yyleng));
    return TOKEN_COMMAND;
  }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 145 "../SqlLexer.lpp"
{
    /* This is a SQL command. Place the char back and process normally. */
    yyless(0);
    yycolumn--;
    BEGIN(CONDITION_SQL);
  }
	YY_BREAK


case 3:
YY_RULE_SETUP
#line 154 "../SqlLexer.lpp"
{
    /* This is a command argument. */
    yylval->string_value_ = new quickstep::ParseString(
        yylloc->first_line, yylloc->first_column, std::string(yytext, yyleng));
    return TOKEN_COMMAND;
  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 161 "../SqlLexer.lpp"
{
    /* Ignore whitespace. */
  }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 165 "../SqlLexer.lpp"
{
    /* Newline reverts the lexer to the initial state. */
    yycolumn = 0;
    BEGIN(INITIAL);
    return '\n';
  }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 174 "../SqlLexer.lpp"
return TOKEN_ADD;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 175 "../SqlLexer.lpp"
return TOKEN_ALL;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 176 "../SqlLexer.lpp"
return TOKEN_ALTER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 177 "../SqlLexer.lpp"
return TOKEN_AND;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 178 "../SqlLexer.lpp"
return TOKEN_AS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 179 "../SqlLexer.lpp"
return TOKEN_ASC;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 180 "../SqlLexer.lpp"
return TOKEN_ASC;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 181 "../SqlLexer.lpp"
return TOKEN_BETWEEN;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 182 "../SqlLexer.lpp"
return TOKEN_BITWEAVING;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 183 "../SqlLexer.lpp"
return TOKEN_BLOCKPROPERTIES;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 184 "../SqlLexer.lpp"
return TOKEN_BLOCKSAMPLE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 185 "../SqlLexer.lpp"
return TOKEN_BLOOM_FILTER;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 186 "../SqlLexer.lpp"
return TOKEN_CASE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 187 "../SqlLexer.lpp"
return TOKEN_CAST;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 188 "../SqlLexer.lpp"
return TOKEN_CSB_TREE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 189 "../SqlLexer.lpp"
return TOKEN_BY;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 190 "../SqlLexer.lpp"
return TOKEN_CHECK;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 191 "../SqlLexer.lpp"
return TOKEN_COLUMN;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 192 "../SqlLexer.lpp"
return TOKEN_CONSTRAINT;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 193 "../SqlLexer.lpp"
return TOKEN_COPY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 194 "../SqlLexer.lpp"
return TOKEN_CREATE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 195 "../SqlLexer.lpp"
return TOKEN_CURRENT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 196 "../SqlLexer.lpp"
return TOKEN_DAY;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 197 "../SqlLexer.lpp"
return TOKEN_DEFAULT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 198 "../SqlLexer.lpp"
return TOKEN_DELETE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 199 "../SqlLexer.lpp"
return TOKEN_DESC;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 200 "../SqlLexer.lpp"
return TOKEN_DESC;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 201 "../SqlLexer.lpp"
return TOKEN_DISTINCT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 202 "../SqlLexer.lpp"
return TOKEN_DROP;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 203 "../SqlLexer.lpp"
return TOKEN_ELSE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 204 "../SqlLexer.lpp"
return TOKEN_END;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 205 "../SqlLexer.lpp"
return TOKEN_EXISTS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 206 "../SqlLexer.lpp"
return TOKEN_EXTRACT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 207 "../SqlLexer.lpp"
return TOKEN_FALSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 208 "../SqlLexer.lpp"
return TOKEN_FIRST;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 209 "../SqlLexer.lpp"
return TOKEN_FOLLOWING;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 210 "../SqlLexer.lpp"
return TOKEN_FOR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 211 "../SqlLexer.lpp"
return TOKEN_FOREIGN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 212 "../SqlLexer.lpp"
return TOKEN_FROM;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 213 "../SqlLexer.lpp"
return TOKEN_FULL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 214 "../SqlLexer.lpp"
return TOKEN_GROUP;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 215 "../SqlLexer.lpp"
return TOKEN_HASH;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 216 "../SqlLexer.lpp"
return TOKEN_HAVING;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 217 "../SqlLexer.lpp"
return TOKEN_HOUR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 218 "../SqlLexer.lpp"
return TOKEN_IN;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 219 "../SqlLexer.lpp"
return TOKEN_INDEX;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 220 "../SqlLexer.lpp"
return TOKEN_INNER;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 221 "../SqlLexer.lpp"
return TOKEN_INSERT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 222 "../SqlLexer.lpp"
return TOKEN_INTERSECT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 223 "../SqlLexer.lpp"
return TOKEN_INTERVAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 224 "../SqlLexer.lpp"
return TOKEN_INTO;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 225 "../SqlLexer.lpp"
return TOKEN_IS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 226 "../SqlLexer.lpp"
return TOKEN_JOIN;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 227 "../SqlLexer.lpp"
return TOKEN_KEY;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 228 "../SqlLexer.lpp"
return TOKEN_LAST;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 229 "../SqlLexer.lpp"
return TOKEN_LEFT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 230 "../SqlLexer.lpp"
return TOKEN_LIKE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 231 "../SqlLexer.lpp"
return TOKEN_LIMIT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 232 "../SqlLexer.lpp"
return TOKEN_MINUTE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 233 "../SqlLexer.lpp"
return TOKEN_MONTH;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 234 "../SqlLexer.lpp"
return TOKEN_NOT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 235 "../SqlLexer.lpp"
return TOKEN_NULL;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 236 "../SqlLexer.lpp"
return TOKEN_NULLS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 237 "../SqlLexer.lpp"
return TOKEN_OFF;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 238 "../SqlLexer.lpp"
return TOKEN_ON;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 239 "../SqlLexer.lpp"
return TOKEN_OR;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 240 "../SqlLexer.lpp"
return TOKEN_ORDER;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 241 "../SqlLexer.lpp"
return TOKEN_OUTER;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 242 "../SqlLexer.lpp"
return TOKEN_OVER;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 243 "../SqlLexer.lpp"
return TOKEN_PARTITION;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 244 "../SqlLexer.lpp"
return TOKEN_PARTITIONS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 245 "../SqlLexer.lpp"
return TOKEN_PERCENT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 246 "../SqlLexer.lpp"
return TOKEN_PRECEDING;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 247 "../SqlLexer.lpp"
return TOKEN_PRIMARY;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 248 "../SqlLexer.lpp"
return TOKEN_PRIORITY;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 249 "../SqlLexer.lpp"
return TOKEN_QUIT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 250 "../SqlLexer.lpp"
return TOKEN_RANGE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 251 "../SqlLexer.lpp"
return TOKEN_REAL;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 252 "../SqlLexer.lpp"
return TOKEN_REFERENCES;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 253 "../SqlLexer.lpp"
return TOKEN_REGEXP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 254 "../SqlLexer.lpp"
return TOKEN_RIGHT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 255 "../SqlLexer.lpp"
return TOKEN_ROW;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 256 "../SqlLexer.lpp"
return TOKEN_ROW_DELIMITER;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 257 "../SqlLexer.lpp"
return TOKEN_ROWS;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 258 "../SqlLexer.lpp"
return TOKEN_SECOND;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 259 "../SqlLexer.lpp"
return TOKEN_SELECT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 260 "../SqlLexer.lpp"
return TOKEN_SET;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 261 "../SqlLexer.lpp"
return TOKEN_SMA;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 262 "../SqlLexer.lpp"
return TOKEN_STDERR;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 263 "../SqlLexer.lpp"
return TOKEN_STDOUT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 264 "../SqlLexer.lpp"
return TOKEN_SUBSTRING;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 265 "../SqlLexer.lpp"
return TOKEN_TABLE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 266 "../SqlLexer.lpp"
return TOKEN_THEN;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 267 "../SqlLexer.lpp"
return TOKEN_TO;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 268 "../SqlLexer.lpp"
return TOKEN_TRUE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 269 "../SqlLexer.lpp"
return TOKEN_TUPLESAMPLE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 270 "../SqlLexer.lpp"
return TOKEN_UNBOUNDED;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 271 "../SqlLexer.lpp"
return TOKEN_UNION;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 272 "../SqlLexer.lpp"
return TOKEN_UNIQUE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 273 "../SqlLexer.lpp"
return TOKEN_UPDATE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 274 "../SqlLexer.lpp"
return TOKEN_USING;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 275 "../SqlLexer.lpp"
return TOKEN_VALUES;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 276 "../SqlLexer.lpp"
return TOKEN_WHEN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 277 "../SqlLexer.lpp"
return TOKEN_WHERE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 278 "../SqlLexer.lpp"
return TOKEN_WINDOW;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 279 "../SqlLexer.lpp"
return TOKEN_WITH;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 280 "../SqlLexer.lpp"
return TOKEN_YEAR;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 282 "../SqlLexer.lpp"
return TOKEN_EQ;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 283 "../SqlLexer.lpp"
return TOKEN_NEQ;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 284 "../SqlLexer.lpp"
return TOKEN_NEQ;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 285 "../SqlLexer.lpp"
return TOKEN_LT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 286 "../SqlLexer.lpp"
return TOKEN_GT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 287 "../SqlLexer.lpp"
return TOKEN_LEQ;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 288 "../SqlLexer.lpp"
return TOKEN_GEQ;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 289 "../SqlLexer.lpp"
return TOKEN_DOUBLECOLON;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 290 "../SqlLexer.lpp"
return TOKEN_LBRACE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 291 "../SqlLexer.lpp"
return TOKEN_RBRACE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 293 "../SqlLexer.lpp"
return yytext[0];
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 294 "../SqlLexer.lpp"
return yytext[0];
	YY_BREAK
/**
    * Quoted strings. Prefacing a string with an 'e' or 'E' causes escape
    * sequences to be processed (as in PostgreSQL).
    **/
case 125:
YY_RULE_SETUP
#line 300 "../SqlLexer.lpp"
{
    yylval->string_value_ = new quickstep::ParseString(yylloc->first_line, yylloc->first_column);
    BEGIN(CONDITION_STRING_SINGLE_QUOTED_ESCAPED);
  }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 305 "../SqlLexer.lpp"
{
    yylval->string_value_ = new quickstep::ParseString(yylloc->first_line, yylloc->first_column);
    BEGIN(CONDITION_STRING_SINGLE_QUOTED);
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 310 "../SqlLexer.lpp"
{
    yylval->string_value_ = new quickstep::ParseString(yylloc->first_line, yylloc->first_column);
    BEGIN(CONDITION_STRING_DOUBLE_QUOTED);
  }
	YY_BREAK
/* CONDITION_SQL */
/* Catch an unterminated string. */

case YY_STATE_EOF(CONDITION_STRING_SINGLE_QUOTED):
case YY_STATE_EOF(CONDITION_STRING_SINGLE_QUOTED_ESCAPED):
case YY_STATE_EOF(CONDITION_STRING_DOUBLE_QUOTED):
#line 319 "../SqlLexer.lpp"
{
    delete yylval->string_value_;
    BEGIN(INITIAL);
    quickstep_yyerror(NULL, yyscanner, NULL, "unterminated string");
    return TOKEN_LEX_ERROR;
  }
	YY_BREAK

/* Process escape sequences. */

case 128:
YY_RULE_SETUP
#line 329 "../SqlLexer.lpp"
{
    /* Octal code */
    unsigned int code;
    std::sscanf(yytext + 1, "%o", &code);
    if (code > 0xff) {
      delete yylval->string_value_;
      BEGIN(INITIAL);
      quickstep_yyerror(NULL, yyscanner, NULL, "octal escape sequence out of 1-byte range");
      return TOKEN_LEX_ERROR;
    }
    yylval->string_value_->push_back(code);
  }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 341 "../SqlLexer.lpp"
{
    /* Hexadecimal code */
    unsigned int code;
    std::sscanf(yytext + 2, "%x", &code);
    yylval->string_value_->push_back(code);
  }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 347 "../SqlLexer.lpp"
{
    /* A numeric escape sequence that isn't correctly specified. */
    delete yylval->string_value_;
    BEGIN(INITIAL);
    quickstep_yyerror(NULL, yyscanner, NULL, "bad numeric escape sequence (must be octal or hex)");
    return TOKEN_LEX_ERROR;
  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 354 "../SqlLexer.lpp"
{
    /* Backspace */
    yylval->string_value_->push_back('\b');
  }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 358 "../SqlLexer.lpp"
{
    /* Form-feed */
    yylval->string_value_->push_back('\f');
  }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 362 "../SqlLexer.lpp"
{
    /* Newline */
    yylval->string_value_->push_back('\n');
  }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 366 "../SqlLexer.lpp"
{
    /* Carriage-return */
    yylval->string_value_->push_back('\r');
  }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 370 "../SqlLexer.lpp"
{
    /* Horizontal Tab */
    yylval->string_value_->push_back('\t');
  }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 374 "../SqlLexer.lpp"
{
    /* Any other character (including actual newline or carriage return) */
    yylval->string_value_->push_back(yytext[1]);
  }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 378 "../SqlLexer.lpp"
{
    /* This should only be encountered right before an EOF. */
    delete yylval->string_value_;
    BEGIN(INITIAL);
    quickstep_yyerror(NULL, yyscanner, NULL, "unfinished escape sequence");
    return TOKEN_LEX_ERROR;
  }
	YY_BREAK


case 138:
YY_RULE_SETUP
#line 388 "../SqlLexer.lpp"
{
    /* Two quotes in a row become a single quote (this is specified by the SQL standard). */
    yylval->string_value_->push_back('\'');
  }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 392 "../SqlLexer.lpp"
{
    /* End string */
    BEGIN(CONDITION_SQL);
    return TOKEN_STRING_SINGLE_QUOTED;
  }
	YY_BREAK


case 140:
YY_RULE_SETUP
#line 400 "../SqlLexer.lpp"
{
    /* Two quotes in a row become a single quote (this is specified by the SQL standard). */
    yylval->string_value_->push_back('"');
  }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 404 "../SqlLexer.lpp"
{
    /* End string */
    BEGIN(CONDITION_SQL);
    return TOKEN_STRING_DOUBLE_QUOTED;
  }
	YY_BREAK

case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 411 "../SqlLexer.lpp"
{
  /* Scan up to a quote. */
  yylval->string_value_->append(yytext, yyleng);
}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 416 "../SqlLexer.lpp"
{
  /* Scan up to a quote or escape sequence. */
  yylval->string_value_->append(yytext, yyleng);
}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 421 "../SqlLexer.lpp"
{
  /* Scan up to a quote. */
  yylval->string_value_->append(yytext, yyleng);
}
	YY_BREAK

case 145:
YY_RULE_SETUP
#line 427 "../SqlLexer.lpp"
{
    yylval->string_value_ = new quickstep::ParseString(
        yylloc->first_line, yylloc->first_column, std::string(yytext, yyleng));
    return TOKEN_NAME;
  }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 433 "../SqlLexer.lpp"
{
    yylval->numeric_literal_value_ = new quickstep::NumericParseLiteralValue(
        yylloc->first_line, yylloc->first_column, yytext);
    return TOKEN_UNSIGNED_NUMVAL;
  }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 439 "../SqlLexer.lpp"
/* comment */
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 441 "../SqlLexer.lpp"
{ yycolumn = 0; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 443 "../SqlLexer.lpp"
; /* ignore white space */
	YY_BREAK
/* CONDITION_SQL */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CONDITION_COMMAND):
case YY_STATE_EOF(CONDITION_SQL):
#line 447 "../SqlLexer.lpp"
{
  /* All conditions except for mutli-state string extracting conditions. */
  BEGIN(INITIAL);
  return TOKEN_EOF;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 453 "../SqlLexer.lpp"
{
  BEGIN(INITIAL);
  quickstep_yyerror(NULL, yyscanner, NULL, "illegal character");
  return TOKEN_LEX_ERROR;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 459 "../SqlLexer.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2525 "SqlLexer_gen.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 534 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 534 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 533);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 459 "../SqlLexer.lpp"


